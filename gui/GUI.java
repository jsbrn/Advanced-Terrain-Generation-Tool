package gui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dialog;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.UIManager;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.plaf.basic.BasicDirectoryModel;
import misc.Assets;
import misc.MiscMath;
import world.World;
import world.terrain.Generator;

public final class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    private GUI() {
        initComponents();
    }
    
    private static GUI gui;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        navigator = new javax.swing.JDialog();
        mapView = new gui.MiniMap();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        NOISEMAP_OPTIONS = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        noiseMapElevationSlider = new javax.swing.JSlider();
        jLabel13 = new javax.swing.JLabel();
        noiseMapAlgoChooser = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        WATER_OPTIONS = new javax.swing.JPanel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        waterSlider1 = new javax.swing.JSlider();
        lakeelvlbl = new javax.swing.JLabel();
        lakestxt = new javax.swing.JTextField();
        jLabel32 = new javax.swing.JLabel();
        riverlen = new javax.swing.JTextField();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        waterSlider2 = new javax.swing.JSlider();
        lakenoiselbl = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        lakemin = new javax.swing.JTextField();
        lakemax = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        riverSlider = new javax.swing.JSlider();
        riverSliderlbl = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        maskSlider = new javax.swing.JSlider();
        masklbl = new javax.swing.JLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0));
        jLabel38 = new javax.swing.JLabel();
        riverThicknessSlider = new javax.swing.JSlider();
        riverThicknessLbl = new javax.swing.JLabel();
        NO_OPTIONS = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        SCATTER_OPTIONS = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        scatterAmountSlider = new javax.swing.JSlider();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        scatterMinSlider = new javax.swing.JSlider();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        scatterMaxSlider = new javax.swing.JSlider();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        heightmaps = new javax.swing.JDialog();
        jPanel2 = new javax.swing.JPanel();
        jLabel25 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        heightMapList = new javax.swing.JList<>();
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel27 = new javax.swing.JLabel();
        heightMapSeedField = new javax.swing.JTextField();
        heightMapAlgorithmChooser = new javax.swing.JComboBox<>();
        jLabel26 = new javax.swing.JLabel();
        createHeightMapButton = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        addTogetherButton = new javax.swing.JButton();
        multiplyTogetherButton = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        CAVE_OPTIONS = new javax.swing.JPanel();
        jLabel33 = new javax.swing.JLabel();
        canvas = new gui.Canvas();
        layerPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        layerList = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        layerUpButton = new javax.swing.JButton();
        layerDownButton = new javax.swing.JButton();
        editLayerButton = new javax.swing.JButton();
        regenLayerButton = new javax.swing.JButton();
        addLayerButton = new javax.swing.JButton();
        deleteLayerButton = new javax.swing.JButton();
        editLayerPanel = new javax.swing.JPanel();
        applyLayerChangesButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        layerNameField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        editLayerTitleLabel = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        layerTileChooser = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        tileRestrictionList = new javax.swing.JList<>();
        jLabel4 = new javax.swing.JLabel();
        restrictionModeChooser = new javax.swing.JComboBox<>();
        cancelLayerChangesButton = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        layerElevationSpinner = new javax.swing.JSpinner();
        generatorTitlePanel = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        generatorChooser = new javax.swing.JComboBox<>();
        openCommandLineButton = new javax.swing.JButton();
        seedField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        randomSeedButton = new javax.swing.JButton();
        generatorBottomPanel = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        clearLayerCheckBox = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        genOptionsScrollPane = new javax.swing.JScrollPane();
        generatorBodyPanel = new javax.swing.JPanel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newWorldButton = new javax.swing.JMenuItem();
        openWorldButton = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        exportTerrainButton = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        exitButton = new javax.swing.JMenuItem();
        worldMenu = new javax.swing.JMenu();
        showNavigatorButton = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem4 = new javax.swing.JMenuItem();
        chooseSpriteSheetMenu = new javax.swing.JMenu();
        earthSpritesheetButton = new javax.swing.JMenuItem();
        marsSpritesheetButton = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        customSpritesheetButton = new javax.swing.JMenuItem();
        setSeedButton = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        drawElevationMapCheckBox = new javax.swing.JCheckBoxMenuItem();
        showHeightmapCheck = new javax.swing.JCheckBoxMenuItem();

        navigator.setTitle("Navigator");
        navigator.setAlwaysOnTop(true);
        navigator.setBounds(new java.awt.Rectangle(100, 100, 500, 500));
        navigator.setIconImage(getIconImage());
        navigator.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                navigatorFocusLost(evt);
            }
        });

        mapView.setBackground(new java.awt.Color(0, 0, 0));
        mapView.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                mapViewFocusLost(evt);
            }
        });

        javax.swing.GroupLayout mapViewLayout = new javax.swing.GroupLayout(mapView);
        mapView.setLayout(mapViewLayout);
        mapViewLayout.setHorizontalGroup(
            mapViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );
        mapViewLayout.setVerticalGroup(
            mapViewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout navigatorLayout = new javax.swing.GroupLayout(navigator.getContentPane());
        navigator.getContentPane().setLayout(navigatorLayout);
        navigatorLayout.setHorizontalGroup(
            navigatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mapView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        navigatorLayout.setVerticalGroup(
            navigatorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mapView, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jMenuItem1.setText("jMenuItem1");

        jMenuItem2.setText("jMenuItem2");

        NOISEMAP_OPTIONS.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                NOISEMAP_OPTIONSAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel10.setText("Create natural, flowing terrain shapes.");

        jLabel11.setText("Elevation");

        jLabel12.setText("0%");

        noiseMapElevationSlider.setMajorTickSpacing(10);
        noiseMapElevationSlider.setPaintTicks(true);
        noiseMapElevationSlider.setValue(0);
        noiseMapElevationSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                noiseMapElevationSliderStateChanged(evt);
            }
        });

        jLabel13.setText("100%");

        noiseMapAlgoChooser.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose a heightmap..." }));
        noiseMapAlgoChooser.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                noiseMapAlgoChooserItemStateChanged(evt);
            }
        });

        jLabel7.setText("Heightmap");

        javax.swing.GroupLayout NOISEMAP_OPTIONSLayout = new javax.swing.GroupLayout(NOISEMAP_OPTIONS);
        NOISEMAP_OPTIONS.setLayout(NOISEMAP_OPTIONSLayout);
        NOISEMAP_OPTIONSLayout.setHorizontalGroup(
            NOISEMAP_OPTIONSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NOISEMAP_OPTIONSLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(NOISEMAP_OPTIONSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(NOISEMAP_OPTIONSLayout.createSequentialGroup()
                        .addGroup(NOISEMAP_OPTIONSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(NOISEMAP_OPTIONSLayout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(NOISEMAP_OPTIONSLayout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(noiseMapElevationSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel13))
                    .addGroup(NOISEMAP_OPTIONSLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(noiseMapAlgoChooser, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(20, 20, 20))
            .addGroup(NOISEMAP_OPTIONSLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        NOISEMAP_OPTIONSLayout.setVerticalGroup(
            NOISEMAP_OPTIONSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NOISEMAP_OPTIONSLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addGap(18, 18, 18)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(NOISEMAP_OPTIONSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(noiseMapElevationSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(noiseMapAlgoChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jLabel28.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel28.setText("Generate rectangular lakes and rivers");

        jLabel29.setText("Lake Mask Noise Elevation");

        waterSlider1.setMinimum(1);
        waterSlider1.setPaintLabels(true);
        waterSlider1.setValue(1);
        waterSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                waterSlider1StateChanged(evt);
            }
        });

        lakeelvlbl.setText("1");

        lakestxt.setText("1");
        lakestxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                lakestxtKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                lakestxtKeyTyped(evt);
            }
        });

        jLabel32.setText("Lakes");

        riverlen.setText("10");
        riverlen.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                riverlenKeyReleased(evt);
            }
        });

        jLabel34.setText("River Length");

        jLabel35.setText("Lake Noise Octaves");

        waterSlider2.setMaximum(10);
        waterSlider2.setMinimum(1);
        waterSlider2.setPaintLabels(true);
        waterSlider2.setValue(1);
        waterSlider2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                waterSlider2StateChanged(evt);
            }
        });

        lakenoiselbl.setText("1");

        jLabel30.setText("Lake Min Dimension");

        jLabel31.setText("Lake Max Dimension");

        lakemin.setText("1");
        lakemin.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                lakeminKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                lakeminKeyTyped(evt);
            }
        });

        lakemax.setText("10");
        lakemax.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                lakemaxKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                lakemaxKeyTyped(evt);
            }
        });

        jLabel36.setText("River Elevation Check Distance");

        riverSlider.setMaximum(50);
        riverSlider.setMinimum(1);
        riverSlider.setPaintLabels(true);
        riverSlider.setValue(2);
        riverSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                riverSliderStateChanged(evt);
            }
        });

        riverSliderlbl.setText("1");

        jLabel37.setText("Lake Mask Curve");

        maskSlider.setMinimum(1);
        maskSlider.setValue(1);
        maskSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                maskSliderStateChanged(evt);
            }
        });

        masklbl.setText("0.1");

        jLabel38.setText("River Thickness");

        riverThicknessSlider.setMaximum(10);
        riverThicknessSlider.setMinimum(1);
        riverThicknessSlider.setPaintLabels(true);
        riverThicknessSlider.setValue(1);
        riverThicknessSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                riverThicknessSliderStateChanged(evt);
            }
        });

        riverThicknessLbl.setText("1");

        javax.swing.GroupLayout WATER_OPTIONSLayout = new javax.swing.GroupLayout(WATER_OPTIONS);
        WATER_OPTIONS.setLayout(WATER_OPTIONSLayout);
        WATER_OPTIONSLayout.setHorizontalGroup(
            WATER_OPTIONSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WATER_OPTIONSLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(WATER_OPTIONSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(WATER_OPTIONSLayout.createSequentialGroup()
                        .addGroup(WATER_OPTIONSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(WATER_OPTIONSLayout.createSequentialGroup()
                                .addGroup(WATER_OPTIONSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel35, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(waterSlider1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)
                                    .addComponent(waterSlider2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(WATER_OPTIONSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lakeelvlbl)
                                    .addComponent(lakenoiselbl)))
                            .addComponent(jLabel29)
                            .addGroup(WATER_OPTIONSLayout.createSequentialGroup()
                                .addGroup(WATER_OPTIONSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel30)
                                    .addComponent(jLabel31))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(WATER_OPTIONSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lakemin)
                                    .addComponent(lakemax, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(WATER_OPTIONSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel32)
                                    .addComponent(jLabel34))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(WATER_OPTIONSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lakestxt)
                                    .addComponent(riverlen, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel38)
                            .addGroup(WATER_OPTIONSLayout.createSequentialGroup()
                                .addComponent(riverThicknessSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(riverThicknessLbl)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(WATER_OPTIONSLayout.createSequentialGroup()
                        .addGroup(WATER_OPTIONSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel28)
                            .addGroup(WATER_OPTIONSLayout.createSequentialGroup()
                                .addComponent(jLabel36)
                                .addGap(36, 36, 36)
                                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel37)
                            .addGroup(WATER_OPTIONSLayout.createSequentialGroup()
                                .addComponent(maskSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(masklbl))
                            .addGroup(WATER_OPTIONSLayout.createSequentialGroup()
                                .addComponent(riverSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(riverSliderlbl)))
                        .addContainerGap(31, Short.MAX_VALUE))))
        );
        WATER_OPTIONSLayout.setVerticalGroup(
            WATER_OPTIONSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WATER_OPTIONSLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel28)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel37)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(WATER_OPTIONSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(maskSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(masklbl, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel29)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(WATER_OPTIONSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(waterSlider1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lakeelvlbl, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel35)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(WATER_OPTIONSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(waterSlider2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lakenoiselbl, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(WATER_OPTIONSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel30)
                    .addComponent(lakemin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lakestxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(WATER_OPTIONSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel31)
                    .addComponent(lakemax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(riverlen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel34))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel38)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(WATER_OPTIONSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(riverThicknessLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(riverThicknessSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(WATER_OPTIONSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(WATER_OPTIONSLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(WATER_OPTIONSLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel36)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(WATER_OPTIONSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(riverSliderlbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(riverSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(30, 30, 30))
        );

        NO_OPTIONS.setAutoscrolls(true);

        jLabel15.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel15.setText("No options available.");

        javax.swing.GroupLayout NO_OPTIONSLayout = new javax.swing.GroupLayout(NO_OPTIONS);
        NO_OPTIONS.setLayout(NO_OPTIONSLayout);
        NO_OPTIONSLayout.setHorizontalGroup(
            NO_OPTIONSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NO_OPTIONSLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel15)
                .addContainerGap(182, Short.MAX_VALUE))
        );
        NO_OPTIONSLayout.setVerticalGroup(
            NO_OPTIONSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NO_OPTIONSLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel15)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        SCATTER_OPTIONS.setAutoscrolls(true);

        jLabel14.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel14.setText("Create scattered plots of tiles.");

        scatterAmountSlider.setPaintLabels(true);
        noiseMapElevationSlider.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent e) {
                Generator.getGenerator("NoiseMap").setParameter("cutoff", ""+((double)noiseMapElevationSlider.getValue()/100d));
            }
        });
        scatterAmountSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                scatterAmountSliderStateChanged(evt);
            }
        });

        jLabel16.setText("Cover amount");

        jLabel17.setText("0%");

        jLabel18.setText("100%");

        scatterMinSlider.setPaintLabels(true);
        scatterMinSlider.setValue(0);
        noiseMapElevationSlider.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent e) {
                Generator.getGenerator("NoiseMap").setParameter("cutoff", ""+((double)noiseMapElevationSlider.getValue()/100d));
            }
        });
        scatterMinSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                scatterMinSliderStateChanged(evt);
            }
        });

        jLabel19.setText("Minimum probability");

        jLabel20.setText("0%");

        jLabel21.setText("100%");

        jLabel22.setText("0%");

        scatterMaxSlider.setPaintLabels(true);
        scatterMaxSlider.setValue(100);
        noiseMapElevationSlider.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent e) {
                Generator.getGenerator("NoiseMap").setParameter("cutoff", ""+((double)noiseMapElevationSlider.getValue()/100d));
            }
        });
        scatterMaxSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                scatterMaxSliderStateChanged(evt);
            }
        });

        jLabel23.setText("100%");

        jLabel24.setText("Maximum probability");

        javax.swing.GroupLayout SCATTER_OPTIONSLayout = new javax.swing.GroupLayout(SCATTER_OPTIONS);
        SCATTER_OPTIONS.setLayout(SCATTER_OPTIONSLayout);
        SCATTER_OPTIONSLayout.setHorizontalGroup(
            SCATTER_OPTIONSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SCATTER_OPTIONSLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(SCATTER_OPTIONSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SCATTER_OPTIONSLayout.createSequentialGroup()
                        .addGroup(SCATTER_OPTIONSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(SCATTER_OPTIONSLayout.createSequentialGroup()
                                .addComponent(jLabel16)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(SCATTER_OPTIONSLayout.createSequentialGroup()
                                .addComponent(jLabel17)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(scatterAmountSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel18))
                    .addGroup(SCATTER_OPTIONSLayout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, SCATTER_OPTIONSLayout.createSequentialGroup()
                        .addGroup(SCATTER_OPTIONSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(SCATTER_OPTIONSLayout.createSequentialGroup()
                                .addComponent(jLabel19)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(SCATTER_OPTIONSLayout.createSequentialGroup()
                                .addComponent(jLabel20)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(scatterMinSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel21))
                    .addGroup(SCATTER_OPTIONSLayout.createSequentialGroup()
                        .addGroup(SCATTER_OPTIONSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(SCATTER_OPTIONSLayout.createSequentialGroup()
                                .addComponent(jLabel24)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(SCATTER_OPTIONSLayout.createSequentialGroup()
                                .addComponent(jLabel22)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(scatterMaxSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel23)))
                .addGap(20, 20, 20))
        );
        SCATTER_OPTIONSLayout.setVerticalGroup(
            SCATTER_OPTIONSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SCATTER_OPTIONSLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel14)
                .addGap(18, 18, 18)
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(SCATTER_OPTIONSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(scatterAmountSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel18, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(SCATTER_OPTIONSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(scatterMinSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel21, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel24)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(SCATTER_OPTIONSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(scatterMaxSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel23, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        heightmaps.setTitle("Heightmap Editor");
        heightmaps.setBounds(new java.awt.Rectangle(100, 100, 530, 400));
        heightmaps.setIconImage(getIconImage());
        heightmaps.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                heightmapsFocusLost(evt);
            }
        });

        jLabel25.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel25.setText("Stored Heightmaps");

        heightMapList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "my custom heightmap" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(heightMapList);

        jButton1.setText("Delete selected");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Create a new heightmap..."));

        jLabel27.setText("Seed:");

        heightMapAlgorithmChooser.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Perlin", "Diamond Square", "Linear Gradient", "Radial Gradient" }));

        jLabel26.setText("Algorithm:");

        createHeightMapButton.setText("Create heightmap");
        createHeightMapButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createHeightMapButtonActionPerformed(evt);
            }
        });

        jButton4.setText("Random seed");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(createHeightMapButton))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel27)
                            .addComponent(jLabel26))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(heightMapAlgorithmChooser, 0, 425, Short.MAX_VALUE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(heightMapSeedField)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton4)))))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27)
                    .addComponent(heightMapSeedField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(heightMapAlgorithmChooser)
                    .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(createHeightMapButton)
                .addContainerGap())
        );

        addTogetherButton.setText("Add together");
        addTogetherButton.setActionCommand("+");
        addTogetherButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTogetherButtonActionPerformed(evt);
            }
        });

        multiplyTogetherButton.setText("Multiply together");
        multiplyTogetherButton.setActionCommand("*");
        multiplyTogetherButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTogetherButtonActionPerformed(evt);
            }
        });

        jButton5.setText("Save as image...");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Use as elevation");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Smooth selected");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addTogetherButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(multiplyTogetherButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel25)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel25)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addTogetherButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(multiplyTogetherButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout heightmapsLayout = new javax.swing.GroupLayout(heightmaps.getContentPane());
        heightmaps.getContentPane().setLayout(heightmapsLayout);
        heightmapsLayout.setHorizontalGroup(
            heightmapsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        heightmapsLayout.setVerticalGroup(
            heightmapsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        CAVE_OPTIONS.setAutoscrolls(true);

        jLabel33.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel33.setText("No options available.");

        javax.swing.GroupLayout CAVE_OPTIONSLayout = new javax.swing.GroupLayout(CAVE_OPTIONS);
        CAVE_OPTIONS.setLayout(CAVE_OPTIONSLayout);
        CAVE_OPTIONSLayout.setHorizontalGroup(
            CAVE_OPTIONSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CAVE_OPTIONSLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel33)
                .addContainerGap(182, Short.MAX_VALUE))
        );
        CAVE_OPTIONSLayout.setVerticalGroup(
            CAVE_OPTIONSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CAVE_OPTIONSLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel33)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Advanced Terrain Generation Tool (1.0.3-alpha)");
        setBounds(new java.awt.Rectangle(100, 100, 550, 900));
        setIconImages(getIconImages());

        canvas.setBackground(new java.awt.Color(0, 0, 0));
        canvas.setDoubleBuffered(false);
        canvas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                canvasMouseClicked(evt);
            }
        });

        layerPanel.setPreferredSize(new java.awt.Dimension(292, 242));

        layerList.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        layerList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Untitled Layer" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        layerList.setSelectedIndices(new int[] {0});
        layerList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                layerListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(layerList);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Layers");

        layerUpButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/up.png"))); // NOI18N
        layerUpButton.setToolTipText("Move up");
        layerUpButton.setEnabled(false);
        layerUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                layerUpButtonActionPerformed(evt);
            }
        });

        layerDownButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/down.png"))); // NOI18N
        layerDownButton.setToolTipText("Move down");
        layerDownButton.setEnabled(false);
        layerDownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                layerDownButtonActionPerformed(evt);
            }
        });

        editLayerButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/edit.png"))); // NOI18N
        editLayerButton.setToolTipText("Edit layer properties");
        editLayerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editLayerButtonActionPerformed(evt);
            }
        });

        regenLayerButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/favicon-16.png"))); // NOI18N
        regenLayerButton.setToolTipText("Terrain generation");
        regenLayerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regenLayerButtonActionPerformed(evt);
            }
        });

        addLayerButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/add.png"))); // NOI18N
        addLayerButton.setToolTipText("Add layer");
        addLayerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addLayerButtonActionPerformed(evt);
            }
        });

        deleteLayerButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/delete.png"))); // NOI18N
        deleteLayerButton.setToolTipText("Delete layer");
        deleteLayerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteLayerButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layerPanelLayout = new javax.swing.GroupLayout(layerPanel);
        layerPanel.setLayout(layerPanelLayout);
        layerPanelLayout.setHorizontalGroup(
            layerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layerPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(regenLayerButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(editLayerButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addLayerButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(layerDownButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(layerUpButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deleteLayerButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(10, 10, 10))
        );
        layerPanelLayout.setVerticalGroup(
            layerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layerPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addGroup(layerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layerPanelLayout.createSequentialGroup()
                        .addComponent(addLayerButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editLayerButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(layerUpButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(layerDownButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteLayerButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(regenLayerButton))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        editLayerPanel.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                editLayerPanelPropertyChange(evt);
            }
        });

        applyLayerChangesButton.setText("Apply changes");
        applyLayerChangesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyLayerChangesButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Name");

        jLabel3.setText("Tile");

        editLayerTitleLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        editLayerTitleLabel.setText("Editing layer properties");

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/left.png"))); // NOI18N

        layerTileChooser.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<no tiles defined>" }));

        tileRestrictionList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "<no tiles defined>" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        tileRestrictionList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                tileRestrictionListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(tileRestrictionList);

        jLabel4.setText("Tile placement restrictions");

        restrictionModeChooser.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Allow all", "Allow selected", "Block selected" }));

        cancelLayerChangesButton.setText("Cancel");
        cancelLayerChangesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelLayerChangesButtonActionPerformed(evt);
            }
        });

        jLabel8.setText("Elevation");

        layerElevationSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                layerElevationSpinnerStateChanged(evt);
            }
        });

        javax.swing.GroupLayout editLayerPanelLayout = new javax.swing.GroupLayout(editLayerPanel);
        editLayerPanel.setLayout(editLayerPanelLayout);
        editLayerPanelLayout.setHorizontalGroup(
            editLayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editLayerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editLayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(layerNameField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(layerTileChooser, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2)
                    .addComponent(editLayerTitleLabel)
                    .addComponent(applyLayerChangesButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cancelLayerChangesButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
                    .addComponent(jLabel8)
                    .addComponent(layerElevationSpinner))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(editLayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editLayerPanelLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(restrictionModeChooser, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        editLayerPanelLayout.setVerticalGroup(
            editLayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editLayerPanelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(editLayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE)
                    .addComponent(editLayerTitleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editLayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editLayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(restrictionModeChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(layerNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(editLayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(editLayerPanelLayout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(layerElevationSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(layerTileChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                        .addComponent(applyLayerChangesButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelLayerChangesButton))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Generate terrain");

        generatorChooser.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<no generators found>" }));
        generatorChooser.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                generatorChooserItemStateChanged(evt);
            }
        });
        generatorChooser.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                generatorChooserMouseReleased(evt);
            }
        });
        generatorChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generatorChooserActionPerformed(evt);
            }
        });

        openCommandLineButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/terminal.png"))); // NOI18N
        openCommandLineButton.setToolTipText("Advanced options...");
        openCommandLineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openCommandLineButtonActionPerformed(evt);
            }
        });

        seedField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                seedFieldKeyReleased(evt);
            }
        });

        jLabel9.setText("Seed:");

        randomSeedButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/refresh.png"))); // NOI18N
        randomSeedButton.setToolTipText("Advanced options...");
        randomSeedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomSeedButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout generatorTitlePanelLayout = new javax.swing.GroupLayout(generatorTitlePanel);
        generatorTitlePanel.setLayout(generatorTitlePanelLayout);
        generatorTitlePanelLayout.setHorizontalGroup(
            generatorTitlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(generatorTitlePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(generatorTitlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(generatorTitlePanelLayout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(seedField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(randomSeedButton))
                    .addGroup(generatorTitlePanelLayout.createSequentialGroup()
                        .addComponent(generatorChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                        .addComponent(openCommandLineButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(generatorTitlePanelLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        generatorTitlePanelLayout.setVerticalGroup(
            generatorTitlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(generatorTitlePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(generatorTitlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(generatorTitlePanelLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(generatorChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(openCommandLineButton, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(generatorTitlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(randomSeedButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(seedField))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton2.setText("Generate!");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Close");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        clearLayerCheckBox.setText("Clear layer");

        javax.swing.GroupLayout generatorBottomPanelLayout = new javax.swing.GroupLayout(generatorBottomPanel);
        generatorBottomPanel.setLayout(generatorBottomPanelLayout);
        generatorBottomPanelLayout.setHorizontalGroup(
            generatorBottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, generatorBottomPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(clearLayerCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addContainerGap())
        );
        generatorBottomPanelLayout.setVerticalGroup(
            generatorBottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, generatorBottomPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(generatorBottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(clearLayerCheckBox))
                .addContainerGap())
        );

        genOptionsScrollPane.setBackground(new java.awt.Color(255, 255, 255));
        genOptionsScrollPane.setBorder(null);
        genOptionsScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        javax.swing.GroupLayout generatorBodyPanelLayout = new javax.swing.GroupLayout(generatorBodyPanel);
        generatorBodyPanel.setLayout(generatorBodyPanelLayout);
        generatorBodyPanelLayout.setHorizontalGroup(
            generatorBodyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        generatorBodyPanelLayout.setVerticalGroup(
            generatorBodyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        genOptionsScrollPane.setViewportView(generatorBodyPanel);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(genOptionsScrollPane)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(genOptionsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        javax.swing.GroupLayout canvasLayout = new javax.swing.GroupLayout(canvas);
        canvas.setLayout(canvasLayout);
        canvasLayout.setHorizontalGroup(
            canvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(canvasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(canvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(layerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE)
                    .addComponent(generatorBottomPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(generatorTitlePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addComponent(editLayerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        canvasLayout.setVerticalGroup(
            canvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, canvasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(generatorTitlePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(generatorBottomPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(canvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(layerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 298, Short.MAX_VALUE)
                    .addComponent(editLayerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        fileMenu.setText("File");
        fileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuActionPerformed(evt);
            }
        });

        newWorldButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newWorldButton.setText("New world");
        newWorldButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newWorld(evt);
            }
        });
        fileMenu.add(newWorldButton);

        openWorldButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openWorldButton.setText("Open world...");
        openWorldButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openWorldButtonActionPerformed(evt);
            }
        });
        fileMenu.add(openWorldButton);

        jMenuItem3.setText("Save world...");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem3);
        fileMenu.add(jSeparator3);

        exportTerrainButton.setText("Export terrain...");
        exportTerrainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportTerrainButtonActionPerformed(evt);
            }
        });
        fileMenu.add(exportTerrainButton);
        fileMenu.add(jSeparator4);

        exitButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });
        fileMenu.add(exitButton);

        menuBar.add(fileMenu);

        worldMenu.setText("World");

        showNavigatorButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        showNavigatorButton.setText("Navigator...");
        showNavigatorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showNavigatorButtonActionPerformed(evt);
            }
        });
        worldMenu.add(showNavigatorButton);
        worldMenu.add(jSeparator1);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("Resize world...");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        worldMenu.add(jMenuItem4);

        chooseSpriteSheetMenu.setText("Choose tile spritesheet...");

        earthSpritesheetButton.setText("Earth");
        earthSpritesheetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                earthSpritesheetButtonActionPerformed(evt);
            }
        });
        chooseSpriteSheetMenu.add(earthSpritesheetButton);

        marsSpritesheetButton.setText("Mars");
        marsSpritesheetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                marsSpritesheetButtonActionPerformed(evt);
            }
        });
        chooseSpriteSheetMenu.add(marsSpritesheetButton);
        chooseSpriteSheetMenu.add(jSeparator2);

        customSpritesheetButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.SHIFT_MASK));
        customSpritesheetButton.setText("Pick a file...");
        customSpritesheetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customSpritesheetButtonActionPerformed(evt);
            }
        });
        chooseSpriteSheetMenu.add(customSpritesheetButton);

        worldMenu.add(chooseSpriteSheetMenu);

        setSeedButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK));
        setSeedButton.setText("Set seed...");
        setSeedButton.setEnabled(false);
        setSeedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setSeedButtonActionPerformed(evt);
            }
        });
        worldMenu.add(setSeedButton);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem5.setText("Edit heightmaps...");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        worldMenu.add(jMenuItem5);

        menuBar.add(worldMenu);

        jMenu1.setText("Canvas");

        drawElevationMapCheckBox.setText("Show elevation shadows");
        drawElevationMapCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawElevationMapCheckBoxActionPerformed(evt);
            }
        });
        jMenu1.add(drawElevationMapCheckBox);

        showHeightmapCheck.setText("Show heightmap shading");
        showHeightmapCheck.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                showHeightmapCheckStateChanged(evt);
            }
        });
        showHeightmapCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showHeightmapCheckActionPerformed(evt);
            }
        });
        jMenu1.add(showHeightmapCheck);

        menuBar.add(jMenu1);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(canvas, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(canvas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newWorld(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newWorld
        World.newWorld(64, 64);
        refreshLayerList();
        editLayerPanel.setVisible(false);
        canvas.repaint();
    }//GEN-LAST:event_newWorld

    @Override
    public Image getIconImage() {
        return getIconImage(32);
    }

    @Override
    public List<Image> getIconImages() {
        ArrayList<Image> icons = new ArrayList<Image>();
        icons.add(getIconImage(16));
        icons.add(getIconImage(32));
        icons.add(getIconImage(48));
        icons.add(getIconImage(64));
        return icons;
    }

    public Image getIconImage(int size) {
        try {
            InputStream img = GUI.class.getResourceAsStream("/resources/favicon-"+size+".png");
            if (img == null) return null;
            return ImageIO.read(img);
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed

    private void customSpritesheetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customSpritesheetButtonActionPerformed
        JFileChooser chooser = new JFileChooser();
        int success = chooser.showOpenDialog(gui);
        if (success == JFileChooser.APPROVE_OPTION) {
            File chosen = chooser.getSelectedFile();
            try {
                World.getWorld().setSpritesheet(chosen.getAbsolutePath());
                System.out.println("Set world spritesheet file to "+chosen.getAbsolutePath());
                String tdefs = JOptionPane.showInputDialog(gui, 
                        "Type the name of each tile in order, comma separated:", 
                        "Add tile definitions", JOptionPane.QUESTION_MESSAGE);
                String tdefspl[] = tdefs.split("\\s*,\\s*");
                World.getWorld().setTileNames(tdefspl);
                editLayerPanel.setVisible(false);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(gui, "You need to choose a valid image file! (.png, .jpg, etc...)", 
                        "Invalid spritesheet", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_customSpritesheetButtonActionPerformed

    private void setSeedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setSeedButtonActionPerformed
        World.getWorld().setSeed(Long.parseLong(JOptionPane.showInputDialog(gui, "Seed (integer):")));
    }//GEN-LAST:event_setSeedButtonActionPerformed

    private void showNavigatorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showNavigatorButtonActionPerformed
        showDialog(navigator, false);
    }//GEN-LAST:event_showNavigatorButtonActionPerformed

    private void navigatorFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_navigatorFocusLost
        navigator.setVisible(false);
    }//GEN-LAST:event_navigatorFocusLost

    private void mapViewFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mapViewFocusLost
        navigator.setVisible(false);
    }//GEN-LAST:event_mapViewFocusLost

    private void earthSpritesheetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_earthSpritesheetButtonActionPerformed
        World.getWorld().setSpritesheet("resources/samples/terrain/earth.png");
        World.getWorld().setTileNames(new String[]{"Stone", "Lava", "Sand", "Dirt", "Grass", "Snow", "Ice", "Water", "Tree", "Rocks", "Chest"});
        editLayerPanel.setVisible(false);
    }//GEN-LAST:event_earthSpritesheetButtonActionPerformed

    private void marsSpritesheetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_marsSpritesheetButtonActionPerformed
        World.getWorld().setSpritesheet("resources/samples/terrain/mars.png");
        World.getWorld().setTileNames(new String[]{"Sand", "Ice", "Rocks"});
        editLayerPanel.setVisible(false);
    }//GEN-LAST:event_marsSpritesheetButtonActionPerformed

    private void exportTerrainButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportTerrainButtonActionPerformed
        JFileChooser saver = new JFileChooser();
        saver.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int success = saver.showSaveDialog(gui);
        if (success == JFileChooser.APPROVE_OPTION) {
            boolean saved = World.getWorld().exportTerrain(saver.getSelectedFile());
            JOptionPane.showMessageDialog(gui, 
                    saved ? "Terrain data has been exported!" : "Error exporting terrain data!", 
                    saved ? "Success" : "Error",
                    JOptionPane.INFORMATION_MESSAGE, new ImageIcon(gui.getIconImage(32)));
        }
    }//GEN-LAST:event_exportTerrainButtonActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        String input = JOptionPane.showInputDialog(gui, 
                        "Enter the new world size (i.e. \"64, 64\")", 
                        "Resize world", JOptionPane.QUESTION_MESSAGE);
        String[] dims = input.split("\\s*,\\s*");
        World.getWorld().resize(Integer.parseInt(dims[0]), Integer.parseInt(dims[1]));
        canvas.repaint();
        refreshLayerList();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void fileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileMenuActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        JFileChooser saver = new JFileChooser();
        saver.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int success = saver.showSaveDialog(gui);
        if (success == JFileChooser.APPROVE_OPTION) {
            boolean saved = World.getWorld().save(saver.getSelectedFile());
            JOptionPane.showMessageDialog(gui, 
                    saved ? "World has been saved!" : "Error saving world!", 
                    saved ? "Success" : "Error",
                    JOptionPane.INFORMATION_MESSAGE, new ImageIcon(gui.getIconImage(32)));
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void openWorldButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openWorldButtonActionPerformed
        JFileChooser saver = new JFileChooser();
        saver.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int success = saver.showSaveDialog(gui);
        if (success == JFileChooser.APPROVE_OPTION) {
            World.newWorld(0, 0);
            boolean saved = World.getWorld().load(saver.getSelectedFile());
            JOptionPane.showMessageDialog(gui, 
                    saved ? "World has been loaded!" : "Error loading world!", 
                    saved ? "Success" : "Error",
                    JOptionPane.INFORMATION_MESSAGE, new ImageIcon(gui.getIconImage(32)));
        }
        refreshLayerList();
        editLayerPanel.setVisible(false);
        canvas.repaint();
    }//GEN-LAST:event_openWorldButtonActionPerformed

    private void canvasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_canvasMouseClicked
        canvas.repaint();
    }//GEN-LAST:event_canvasMouseClicked

    private void editLayerPanelPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_editLayerPanelPropertyChange
        System.out.println(evt.getPropertyName());
    }//GEN-LAST:event_editLayerPanelPropertyChange

    private void cancelLayerChangesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelLayerChangesButtonActionPerformed
        editLayerPanel.setVisible(false);
    }//GEN-LAST:event_cancelLayerChangesButtonActionPerformed

    private void tileRestrictionListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_tileRestrictionListValueChanged

    }//GEN-LAST:event_tileRestrictionListValueChanged

    private void applyLayerChangesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyLayerChangesButtonActionPerformed
        boolean comma = layerNameField.getText().contains(",");
        if (layerNameField.getText().trim().length() == 0 || comma) {
            JOptionPane.showMessageDialog(gui,
                !comma ? "You cannot have a blank layer name!" : "Commas are not allowed in layer names!",
                "Invalid name", JOptionPane.ERROR_MESSAGE);
            return;
        }
        //apply layer properties
        int[] layers = layerList.getSelectedIndices();
        for (int layer: layers) {
            World.getWorld().setLayerProperty("name", layerNameField.getText(), layer);
            World.getWorld().setLayerProperty("tile", layerTileChooser.getSelectedIndex(), layer);
            World.getWorld().setLayerProperty("rmode", restrictionModeChooser.getSelectedIndex(), layer);
            World.getWorld().setLayerProperty("rtiles", tileRestrictionList.getSelectedIndices(), layer);
            World.getWorld().setLayerProperty("elevation", layerElevationSpinner.getValue(), layerList.getSelectedIndex());
        }
        canvas.repaint();
        refreshLayerList();
        editLayerPanel.setVisible(false);
    }//GEN-LAST:event_applyLayerChangesButtonActionPerformed

    private void addLayerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addLayerButtonActionPerformed
        World.getWorld().newLayer();
        gui.refreshLayerList();
        layerList.setSelectedIndex(0);
        canvas.repaint();
        layerList.ensureIndexIsVisible(layerList.getSelectedIndex());
    }//GEN-LAST:event_addLayerButtonActionPerformed

    private void regenLayerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regenLayerButtonActionPerformed
        int gindex = generatorChooser.getSelectedIndex();
        DefaultComboBoxModel<String> m = new DefaultComboBoxModel<String>();
        for (int i = 0; i < Generator.generatorCount(); i++)
            m.addElement(Generator.getGeneratorName(i));
        generatorChooser.setModel(m);
        generatorChooser.setSelectedIndex(-1);
        generatorChooser.setSelectedIndex(gindex);
        //repaint
        canvas.repaint();
        setGeneratorPanelVisible(true);
    }//GEN-LAST:event_regenLayerButtonActionPerformed

    private void deleteLayerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteLayerButtonActionPerformed
        //deleye layers
        int[] layers = layerList.getSelectedIndices();
        int start_index = layerList.getSelectedIndex();
        for (int l = layers.length - 1; l > -1; l--) {
            //System.out.println("Removing layer: "+layers[l]);
            World.getWorld().removeLayer(layers[l]);
        }
        if (World.getWorld().layerCount() == 0) World.getWorld().newLayer();
        layerList.setSelectedIndex((int)MiscMath.clamp(start_index, 0, World.getWorld().layerCount() - 1));
        refreshLayerList();
        editLayerPanel.setVisible(false);
        canvas.repaint();
    }//GEN-LAST:event_deleteLayerButtonActionPerformed

    private void editLayerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editLayerButtonActionPerformed
        refreshLayerList();
        canvas.repaint();
        editLayerPanel.setVisible(true);
    }//GEN-LAST:event_editLayerButtonActionPerformed

    private void layerDownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_layerDownButtonActionPerformed
        World.getWorld().reorderLayer(layerList.getSelectedIndex(), 1);
        canvas.repaint();
        refreshLayerList();
    }//GEN-LAST:event_layerDownButtonActionPerformed

    private void layerUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_layerUpButtonActionPerformed
        World.getWorld().reorderLayer(layerList.getSelectedIndex(), -1);
        canvas.repaint();
        refreshLayerList();
    }//GEN-LAST:event_layerUpButtonActionPerformed

    private void layerListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_layerListValueChanged
        if (evt.getFirstIndex() == -1) layerList.setSelectedIndex(0);
        int scount = evt.getLastIndex() - evt.getFirstIndex();
        editLayerPanel.setVisible(false);
    }//GEN-LAST:event_layerListValueChanged

    private void generatorChooserMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_generatorChooserMouseReleased

    }//GEN-LAST:event_generatorChooserMouseReleased

    private void generatorChooserItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_generatorChooserItemStateChanged

        if (generatorChooser.getSelectedIndex() == -1) return;
        Generator g = Generator.getGenerator(generatorChooser.getSelectedIndex());
        generatorBodyPanel.removeAll();
        generatorBodyPanel.setLayout(new BorderLayout());
        generatorBodyPanel.add(Generator.getOptionsPanel(generatorChooser.getSelectedIndex()), BorderLayout.CENTER);
        generatorBodyPanel.revalidate();
        generatorBodyPanel.repaint();
        
        seedField.setText(g.getSeed()+"");
        seedField.setForeground(Color.black);
        
    }//GEN-LAST:event_generatorChooserItemStateChanged

    private void openCommandLineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openCommandLineButtonActionPerformed
        String s = JOptionPane.showInputDialog(gui, "Parameters:", 
                World.getWorld().getLayerProperty("lastcmd", Canvas.layer()));
        if (s == null) return; s = s.trim();
        World.getWorld().setLayerProperty("lastcmd", s, Canvas.layer());
        //split by colon
        String split[] = s.split("\\s*:\\s*");
        if (split.length == 0) { System.err.println("Invalid input!"); return; }
        //find generator type
        String gname = split[0].trim(); 
        Generator g = Generator.getGenerator(gname);
        
        if (split.length > 1) { //if params actually exist
            String params = split[1].trim();
            System.out.println(gname);
            //find parameters
            String[] params_spl = params.split("\\s*,\\s*");
            if (g == null) { System.err.println("Generator '"+gname+"' not found!"); return; }
            for (int i = 0; i < params_spl.length; i++) {
                String spl[] = params_spl[i].split("\\s*=\\s*");
                String name = spl[0]; String val = spl[1];
                g.setParameter(name, val);
                System.out.println(gname+" parameter: "+name+" = "+val);
            }
        }
        
        //clear and generate
        
        int[] selected = layerList.getSelectedIndices();
        for (int l = selected.length - 1; l > -1; l--) {
            World.getWorld().clearTiles(selected[l]);
            g.generate(World.getWorld(), selected[l]);
        }
        //repaint
        canvas.repaint();
    }//GEN-LAST:event_openCommandLineButtonActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        setGeneratorPanelVisible(false);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Generator g = Generator.getGenerator(generatorChooser.getSelectedIndex());
        g.reset();
        int[] selected = layerList.getSelectedIndices();
        for (int l = selected.length - 1; l > -1; l--) {
            if (clearLayerCheckBox.isSelected()) World.getWorld().clearTiles(selected[l]);
            g.generate(World.getWorld(), selected[l]);
        }
        canvas.repaint();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void noiseMapElevationSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_noiseMapElevationSliderStateChanged
        Generator.getGenerator("NoiseMap").setParameter("elevation", ""+((double)noiseMapElevationSlider.getValue()/100d));
    }//GEN-LAST:event_noiseMapElevationSliderStateChanged

    private void scatterAmountSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_scatterAmountSliderStateChanged
        Generator.getGenerator("Scattered").setParameter("amount", ""+((double)scatterAmountSlider.getValue()/100d));
    }//GEN-LAST:event_scatterAmountSliderStateChanged

    private void scatterMinSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_scatterMinSliderStateChanged
        Generator.getGenerator("Scattered").setParameter("min", ""+((double)scatterMinSlider.getValue()/100d));
    }//GEN-LAST:event_scatterMinSliderStateChanged

    private void scatterMaxSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_scatterMaxSliderStateChanged
       Generator.getGenerator("Scattered").setParameter("max", ""+((double)scatterMaxSlider.getValue()/100d));
    }//GEN-LAST:event_scatterMaxSliderStateChanged

    private void noiseMapAlgoChooserItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_noiseMapAlgoChooserItemStateChanged

        Generator.getGenerator("NoiseMap").setParameter("heightmap", (String)noiseMapAlgoChooser.getSelectedItem());
    }//GEN-LAST:event_noiseMapAlgoChooserItemStateChanged

    private void layerElevationSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_layerElevationSpinnerStateChanged
        canvas.repaint();
    }//GEN-LAST:event_layerElevationSpinnerStateChanged

    private void randomSeedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomSeedButtonActionPerformed
        seedField.setText(new Random().nextInt()+"");
        Generator g = Generator.getGenerator(generatorChooser.getSelectedIndex());
        g.setSeed(Long.parseLong(seedField.getText()));
        seedField.setForeground(Color.black);
        
    }//GEN-LAST:event_randomSeedButtonActionPerformed

    private void seedFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_seedFieldKeyReleased
        boolean valid = seedField.getText().matches("(-)*\\d+")
                && seedField.getText().length() < 16;
        Generator g = Generator.getGenerator(generatorChooser.getSelectedIndex());
        if (valid) g.setSeed(Long.parseLong(seedField.getText()));
        seedField.setForeground(valid ? Color.black : Color.red);
    }//GEN-LAST:event_seedFieldKeyReleased

    private void generatorChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generatorChooserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_generatorChooserActionPerformed

    private void heightmapsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_heightmapsFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_heightmapsFocusLost

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        refreshHeightmapEditor();
        showDialog(heightmaps, true);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int[] indices = heightMapList.getSelectedIndices();
        for (int index: indices)
            World.getWorld().deleteHeightmap(index);
        refreshHeightmapEditor();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void maskSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_maskSliderStateChanged
        masklbl.setText(Float.toString((float)(maskSlider.getValue()/10.)));
        Generator.getGenerator("WaterGenerator").setParameter("maskcurve", Float.toString((float)(maskSlider.getValue()/10.)));
    }//GEN-LAST:event_maskSliderStateChanged

    private void riverSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_riverSliderStateChanged
        // TODO add your handling code here:
        riverSliderlbl.setText(Integer.toString(riverSlider.getValue()));
        Generator.getGenerator("WaterGenerator").setParameter("riverchecklen", Integer.toString(riverSlider.getValue()));
    }//GEN-LAST:event_riverSliderStateChanged

    private void lakemaxKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lakemaxKeyTyped

    }//GEN-LAST:event_lakemaxKeyTyped

    private void lakemaxKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lakemaxKeyReleased
        Generator.getGenerator("WaterGenerator").setParameter("max", lakemax.getText());
    }//GEN-LAST:event_lakemaxKeyReleased

    private void lakeminKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lakeminKeyTyped

    }//GEN-LAST:event_lakeminKeyTyped

    private void lakeminKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lakeminKeyReleased
        // TODO add your handling code here:
        Generator.getGenerator("WaterGenerator").setParameter("min", lakemin.getText());
    }//GEN-LAST:event_lakeminKeyReleased

    private void waterSlider2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_waterSlider2StateChanged
        // TODO add your handling code here:
        lakenoiselbl.setText(Integer.toString(waterSlider2.getValue()));
        Generator.getGenerator("WaterGenerator").setParameter("lakeoctaves", Integer.toString(waterSlider2.getValue()));
    }//GEN-LAST:event_waterSlider2StateChanged

    private void riverlenKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_riverlenKeyReleased
        Generator.getGenerator("WaterGenerator").setParameter("rlength", riverlen.getText());
    }//GEN-LAST:event_riverlenKeyReleased

    private void lakestxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lakestxtKeyTyped

    }//GEN-LAST:event_lakestxtKeyTyped

    private void lakestxtKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lakestxtKeyReleased
        Generator.getGenerator("WaterGenerator").setParameter("lakes", lakestxt.getText());
    }//GEN-LAST:event_lakestxtKeyReleased

    private void waterSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_waterSlider1StateChanged
        // TODO add your handling code here:
        lakeelvlbl.setText(Integer.toString(waterSlider1.getValue()));
        Generator.getGenerator("WaterGenerator").setParameter("elevation", Float.toString(waterSlider1.getValue()/(float)100.));
    }//GEN-LAST:event_waterSlider1StateChanged

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        heightMapSeedField.setText((World.getWorld().rng().nextInt()+"").replace("-", ""));
    }//GEN-LAST:event_jButton4ActionPerformed

    private void createHeightMapButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createHeightMapButtonActionPerformed
        if (heightMapSeedField.getText().length() == 0) return;
        World.getWorld().createHeightmap((String)heightMapAlgorithmChooser.getSelectedItem(), 
                Long.parseLong(heightMapSeedField.getText()), true);
        refreshHeightmapEditor();
    }//GEN-LAST:event_createHeightMapButtonActionPerformed

    private void addTogetherButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTogetherButtonActionPerformed
        int[] indices = heightMapList.getSelectedIndices();
        if (indices.length < 2) return;
        boolean add = evt.getActionCommand().equals("+");
        float[][] root = World.getWorld().getHeightmap(indices[0]);
        String name = World.getWorld().getHeightmapName(0).split("\\] \\[")[0]+"]";
        for (int index = 1; index < indices.length; index++) {
            name += (add ? " + " : " x ") + World.getWorld().getHeightmapName(index).split("\\] \\[")[0]+"]";
            root = World.getWorld().combineHeightmaps(root, World.getWorld().getHeightmap(indices[index]), add);
        }
        World.getWorld().saveHeightmap(name, root);
        refreshHeightmapEditor();
    }//GEN-LAST:event_addTogetherButtonActionPerformed


    private void riverThicknessSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_riverThicknessSliderStateChanged
        riverThicknessLbl.setText(Integer.toString(riverThicknessSlider.getValue()));
        Generator.getGenerator("WaterGenerator").setParameter("riverThickness", Integer.toString(riverThicknessSlider.getValue()));
    }//GEN-LAST:event_riverThicknessSliderStateChanged

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        JFileChooser saver = new JFileChooser();
        saver.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        
        int[] indices = heightMapList.getSelectedIndices();
        if (indices.length <= 0) return;
  
        int success = saver.showSaveDialog(gui);
        if (success == JFileChooser.APPROVE_OPTION) {
            for (int index: indices) {
                String name = World.getWorld().getHeightmapName(index);
                BufferedImage img = World.getWorld().toBufferedImage(name);
                File outputfile = new File(saver.getSelectedFile().getAbsolutePath()+"/"+name+".png");
                try {
                    ImageIO.write(img, "png", outputfile);
                } catch (IOException ex) {
                    Logger.getLogger(World.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            JOptionPane.showMessageDialog(gui, 
                    "Exported selected maps as images!", 
                    "Success",
                    JOptionPane.INFORMATION_MESSAGE, new ImageIcon(gui.getIconImage(32)));
        }
        
    }//GEN-LAST:event_jButton5ActionPerformed

    private void drawElevationMapCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawElevationMapCheckBoxActionPerformed
        getCanvas().setShowElevationMap(drawElevationMapCheckBox.isSelected());
    }//GEN-LAST:event_drawElevationMapCheckBoxActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        if (heightMapList.getSelectedIndex() > -1) 
            World.getWorld().setElevationHeightmap(heightMapList.getSelectedValue());
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        int[] indices = heightMapList.getSelectedIndices();
        for (int index: indices)
            World.getWorld().smoothHeightmap(10, World.getWorld().getHeightmap(index));
        refreshHeightmapEditor();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void NOISEMAP_OPTIONSAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_NOISEMAP_OPTIONSAncestorAdded
        DefaultComboBoxModel<String> md = new DefaultComboBoxModel<String>();
        for (String s: World.getWorld().getSavedHeightmaps())
            md.addElement(s);
        noiseMapAlgoChooser.setModel(md);
    }//GEN-LAST:event_NOISEMAP_OPTIONSAncestorAdded

    private void showHeightmapCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showHeightmapCheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_showHeightmapCheckActionPerformed

    private void showHeightmapCheckStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_showHeightmapCheckStateChanged
        if(showHeightmapCheck.isSelected()){
            World.getWorld().heightmapShow();
            
        }else{
            World.getWorld().heightmapHide();
        }
        canvas.repaint();
    }//GEN-LAST:event_showHeightmapCheckStateChanged


    /**
     * Show (and make modal) a custom dialog popup.
     * @param d The JDialog to show.
     * @param modal Modal, or not?
     */
    public static void showDialog(JDialog d, boolean modal) {
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        double width = screenSize.getWidth();
        double height = screenSize.getHeight();
        d.setLocation(gui.getX() + (int) (gui.getWidth() / 2) - (d.getWidth() / 2),
                gui.getY() + (int) (gui.getHeight() / 2) - ((d.getHeight() / 2)));
        d.setModal(modal);
        d.setModalityType(modal ? Dialog.ModalityType.APPLICATION_MODAL : Dialog.ModalityType.MODELESS);
        d.setVisible(true);
        System.out.println("Showing " + d.getTitle());
    }
    
    private void setGeneratorPanelVisible(boolean v) {
        generatorTitlePanel.setVisible(v);
        generatorBodyPanel.setVisible(v);
        generatorBottomPanel.setVisible(v);
        genOptionsScrollPane.setVisible(v);
        jPanel1.setVisible(v);
    }
    
    /**
     * Refresh input fields and the list of layers in the corner of the Canvas.
     */
    public void refreshLayerList() {
        DefaultListModel m = new DefaultListModel();
        int[] indices = layerList.getSelectedIndices();
        for (int i = 0; i < World.getWorld().layerCount(); i++) 
            m.addElement(World.getWorld().getLayerProperty("name", i));
        layerList.setModel(m);
        layerList.setSelectedIndices(indices);
        
        boolean multiple = layerList.getSelectedIndices().length > 1;
        
        //update layer edit panel
        layerNameField.setText(multiple ? "" : (String)World.getWorld().getLayerProperty("name", layerList.getSelectedIndex()));
        DefaultComboBoxModel<String> md = new DefaultComboBoxModel<String>();
        DefaultListModel dlm = new DefaultListModel();
        for (String tile: World.getWorld().getTileNames()) { md.addElement(tile); dlm.addElement(tile); }
        layerTileChooser.setModel(md);
        tileRestrictionList.setModel(dlm);
        layerTileChooser.setSelectedIndex(multiple ? 0 
                : (Integer)World.getWorld().getLayerProperty("tile", layerList.getSelectedIndex()));
        restrictionModeChooser.setSelectedIndex(multiple ? 0 
                : (Integer)World.getWorld().getLayerProperty("rmode", layerList.getSelectedIndex()));
        tileRestrictionList.setSelectedIndices(multiple ? new int[]{} 
                : (int[])World.getWorld().getLayerProperty("rtiles", layerList.getSelectedIndex()));
        
        editLayerTitleLabel.setText(multiple ? "Editing multiple layers" : "Editing layer properties");
        layerElevationSpinner.setValue(multiple ? 0 : World.getWorld().getLayerProperty("elevation", layerList.getSelectedIndex()));
        
        //layerUpButton.setEnabled(layerList.getSelectedIndex() > 0);
        //layerDownButton.setEnabled(layerList.getSelectedIndex() < m.getSize() - 1);
    }
    
    public void refreshHeightmapEditor() {
        DefaultListModel<String> m = new DefaultListModel<String>();
        for (String s: World.getWorld().getSavedHeightmaps())
            m.addElement(s);
        heightMapList.setModel(m);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            e.printStackTrace();
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Assets.init();
                gui = new GUI();
                gui.setVisible(true);
                World.newWorld(64, 64);
                gui.refreshLayerList();
                gui.setGeneratorPanelVisible(false);
            }
        });
    }
    
    protected static Canvas getCanvas() { return gui == null ? null : gui.canvas; }
    protected static MiniMap getMiniMap() { return gui == null ? null : gui.mapView; }
    protected static JList getLayerList() { return layerList; }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JPanel CAVE_OPTIONS;
    public static javax.swing.JPanel NOISEMAP_OPTIONS;
    public static javax.swing.JPanel NO_OPTIONS;
    public static javax.swing.JPanel SCATTER_OPTIONS;
    public static javax.swing.JPanel WATER_OPTIONS;
    private javax.swing.JButton addLayerButton;
    private javax.swing.JButton addTogetherButton;
    private javax.swing.JButton applyLayerChangesButton;
    private javax.swing.JButton cancelLayerChangesButton;
    private gui.Canvas canvas;
    private javax.swing.JMenu chooseSpriteSheetMenu;
    private javax.swing.JCheckBox clearLayerCheckBox;
    private javax.swing.JButton createHeightMapButton;
    private javax.swing.JMenuItem customSpritesheetButton;
    private javax.swing.JButton deleteLayerButton;
    private javax.swing.JCheckBoxMenuItem drawElevationMapCheckBox;
    private javax.swing.JMenuItem earthSpritesheetButton;
    private javax.swing.JButton editLayerButton;
    private javax.swing.JPanel editLayerPanel;
    private javax.swing.JLabel editLayerTitleLabel;
    private javax.swing.JMenuItem exitButton;
    private javax.swing.JMenuItem exportTerrainButton;
    private javax.swing.JMenu fileMenu;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JScrollPane genOptionsScrollPane;
    private javax.swing.JPanel generatorBodyPanel;
    private javax.swing.JPanel generatorBottomPanel;
    private javax.swing.JComboBox<String> generatorChooser;
    private javax.swing.JPanel generatorTitlePanel;
    private javax.swing.JComboBox<String> heightMapAlgorithmChooser;
    private javax.swing.JList<String> heightMapList;
    private javax.swing.JTextField heightMapSeedField;
    private javax.swing.JDialog heightmaps;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JLabel lakeelvlbl;
    private javax.swing.JTextField lakemax;
    private javax.swing.JTextField lakemin;
    private javax.swing.JLabel lakenoiselbl;
    private javax.swing.JTextField lakestxt;
    private javax.swing.JButton layerDownButton;
    private javax.swing.JSpinner layerElevationSpinner;
    private static javax.swing.JList<String> layerList;
    private javax.swing.JTextField layerNameField;
    private javax.swing.JPanel layerPanel;
    private javax.swing.JComboBox<String> layerTileChooser;
    private javax.swing.JButton layerUpButton;
    private gui.MiniMap mapView;
    private javax.swing.JMenuItem marsSpritesheetButton;
    private javax.swing.JSlider maskSlider;
    private javax.swing.JLabel masklbl;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton multiplyTogetherButton;
    private javax.swing.JDialog navigator;
    private javax.swing.JMenuItem newWorldButton;
    private javax.swing.JComboBox<String> noiseMapAlgoChooser;
    private javax.swing.JSlider noiseMapElevationSlider;
    private javax.swing.JButton openCommandLineButton;
    private javax.swing.JMenuItem openWorldButton;
    private javax.swing.JButton randomSeedButton;
    private javax.swing.JButton regenLayerButton;
    private javax.swing.JComboBox<String> restrictionModeChooser;
    private javax.swing.JSlider riverSlider;
    private javax.swing.JLabel riverSliderlbl;
    private javax.swing.JLabel riverThicknessLbl;
    private javax.swing.JSlider riverThicknessSlider;
    private javax.swing.JTextField riverlen;
    private javax.swing.JSlider scatterAmountSlider;
    private javax.swing.JSlider scatterMaxSlider;
    private javax.swing.JSlider scatterMinSlider;
    private javax.swing.JTextField seedField;
    private javax.swing.JMenuItem setSeedButton;
    private javax.swing.JCheckBoxMenuItem showHeightmapCheck;
    private javax.swing.JMenuItem showNavigatorButton;
    private javax.swing.JList<String> tileRestrictionList;
    private javax.swing.JSlider waterSlider1;
    private javax.swing.JSlider waterSlider2;
    private javax.swing.JMenu worldMenu;
    // End of variables declaration//GEN-END:variables
}
